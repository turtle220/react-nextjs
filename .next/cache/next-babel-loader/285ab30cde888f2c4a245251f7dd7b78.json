{"ast":null,"code":"var _jsxFileName = \"D:\\\\interview\\\\interview-fullstack-master\\\\components\\\\MatrixTable\\\\index.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport classnames from 'classnames';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { MatrixTableContext, MatrixTableContextProvider } from './context';\n\n/**\n * Add 4 buttons: \n * - Cancel to reset the matrix to how it was before changing the values (only when in edit mode)\n * - Edit to make the fields editable (only when not in edit mode)\n * - Clear to completely clear the table\n * - Save to save the table\n * @param param0 \n */\nconst MatrixTable = (_ref) => {\n  let {\n    className,\n    children\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"className\", \"children\"]);\n\n  // State ------------------------------------------------------------------- //\n  const {\n    0: {\n      matrix\n    },\n    1: dispatch\n  } = useContext(MatrixTableContext);\n  const {\n    0: matrixData,\n    1: setMatrixData\n  } = useState(matrix);\n  const {\n    0: enableEdit,\n    1: setEnableEdit\n  } = useState(true); // Handlers ---------------------------------------------------------------- //\n\n  useEffect(() => {\n    fetch('http://localhost:3000/api/pricing', {\n      method: 'GET',\n      headers: {\n        accept: 'application/json',\n        'content-type': 'application/json'\n      }\n    }).then(res => res.json()).then(data => {\n      setMatrixData(data);\n      dispatch({\n        type: 'GET_ALL_DATA',\n        payload: data\n      });\n    }).catch(err => console.log('---error', err));\n  }, []); // You can save (to api) the matrix here. Remember to update originalMatrix when done.\n\n  const save = async () => {\n    dispatch({\n      type: 'SAVE_JSON'\n    });\n  }; // Effects ----------------------------------------------------------------- //\n  // Rendering --------------------------------------------------------------- //\n  // const updatematrixtable = \n  //   <table id=\"customers\">\n  //       <tr>\n  //         <th>months</th>\n  //         <th>lite</th>\n  //         <th>standard</th>\n  //         <th>unlimited</th>\n  //         <th>performance</th>\n  //       </tr>\n  //       <tr>\n  //         <td>12months</td>\n  //         <td>{matrixData[\"12months\"].lite}</td>\n  //         <td>{matrixData[\"12months\"].standard}</td>\n  //         <td>{matrixData[\"12months\"].unlimited}</td>\n  //       </tr>\n  //       <tr>\n  //         <td>24months</td>\n  //         <td>{matrixData[\"24months\"].lite}</td>\n  //         <td>{matrixData[\"24months\"].standard}</td>\n  //         <td>{matrixData[\"24months\"].unlimited}</td>\n  //       </tr>\n  //       <tr>\n  //         <td>36months</td>\n  //         <td>{matrixData[\"36months\"].lite}</td>\n  //         <td>{matrixData[\"36months\"].standard}</td>\n  //         <td>{matrixData[\"36months\"].unlimited}</td>\n  //       </tr>\n  //       <tr>\n  //         <td>mtm</td>\n  //         <td>{matrixData.mtm.lite}</td>\n  //         <td>{matrixData.mtm.standard}</td>\n  //         <td>{matrixData.mtm.unlimited}</td>\n  //       </tr>\n  //     </table>\n\n\n  const edit = () => {\n    console.log(\"editbutton\");\n    setEnableEdit(false);\n  };\n\n  const cancel = () => {\n    console.log(\"cancelbutton\");\n    setEnableEdit(true);\n  };\n\n  const clear = () => {\n    console.log('clear');\n    dispatch({\n      type: 'CLEAR_PRICING'\n    });\n  };\n\n  return __jsx(\"div\", _extends({\n    className: classnames(['container', className])\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }), __jsx(\"table\", {\n    id: \"customers\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, \"months\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, \"lite\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, \"standard\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, \"unlimited\")), Object.keys(matrix).map((keyName, i) => __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, keyName), enableEdit ? __jsx(React.Fragment, null, __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }\n  }, matrix[keyName].lite), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }\n  }, matrix[keyName].standard), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }\n  }, matrix[keyName].unlimited)) : __jsx(React.Fragment, null, __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }\n  }, __jsx(\"input\", {\n    type: \"number\",\n    defaultValue: matrix[keyName].lite,\n    onChange: event => dispatch({\n      type: 'EDIT_ACTION',\n      payload: {\n        keyName,\n        fieldName: 'lite',\n        value: event.target.value\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 21\n    }\n  })), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 17\n    }\n  }, __jsx(\"input\", {\n    type: \"number\",\n    defaultValue: matrix[keyName].standard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 21\n    }\n  })), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 17\n    }\n  }, __jsx(\"input\", {\n    type: \"number\",\n    defaultValue: matrix[keyName].unlimited,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 21\n    }\n  })))))), __jsx(\"div\", {\n    id: \"buttonGroup\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    onClick: save,\n    className: \"btn btn-success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, \"Save\"), __jsx(\"button\", {\n    onClick: clear,\n    className: \"btn btn-success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, \"Clear\"), enableEdit ? __jsx(\"button\", {\n    onClick: edit,\n    className: \"btn btn-success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 23\n    }\n  }, \"Edit\") : __jsx(\"button\", {\n    onClick: cancel,\n    className: \"btn btn-success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 90\n    }\n  }, \"Show\")), __jsx(\"style\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }\n  }, `\n        .container {\n          margin:0;\n          width:100%\n        }\n        #customers {\n          font-family: \"Trebuchet MS\", Arial, Helvetica, sans-serif;\n          border-collapse: collapse;\n          width: 100%;\n        }\n        \n        #customers td, #customers th {\n          width: 250px;\n          border: 1px solid #ddd;\n          padding: 8px;\n        }\n        \n        #customers tr:nth-child(even){background-color: #f2f2f2;}\n        \n        #customers tr:hover {background-color: #ddd;}\n        \n        #customers th {\n          padding-top: 12px;\n          padding-bottom: 12px;\n          text-align: left;\n          background-color: #4CAF50;\n          color: white;\n        }\n        #buttonGroup div {\n          padding-top: 20px;\n        }\n      `));\n};\n\nconst MatrixTableWithContext = (_ref2) => {\n  let {\n    initialMatrix\n  } = _ref2,\n      props = _objectWithoutProperties(_ref2, [\"initialMatrix\"]);\n\n  // You can fetch the pricing here or in pages/index.ts\n  // Remember that you should try to reflect the state of pricing in originalMatrix.\n  // matrix will hold the latest value (edited or same as originalMatrix)\n  return __jsx(MatrixTableContextProvider, {\n    initialMatrix: initialMatrix,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 5\n    }\n  }, __jsx(MatrixTable, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }\n  })));\n};\n\nexport default MatrixTableWithContext;","map":{"version":3,"sources":["D:/interview/interview-fullstack-master/components/MatrixTable/index.tsx"],"names":["classnames","React","useContext","useEffect","useState","MatrixTableContext","MatrixTableContextProvider","MatrixTable","className","children","props","matrix","dispatch","matrixData","setMatrixData","enableEdit","setEnableEdit","fetch","method","headers","accept","then","res","json","data","type","payload","catch","err","console","log","save","edit","cancel","clear","Object","keys","map","keyName","i","lite","standard","unlimited","event","fieldName","value","target","MatrixTableWithContext","initialMatrix"],"mappings":"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","sourcesContent":["import classnames from 'classnames'\nimport React, { useContext, useEffect,useState } from 'react'\nimport { MatrixTableContext, MatrixTableContextProvider } from './context'\nimport { store } from '../../pages/store';\n\n  type Props = {\n    initialMatrix?: import('../../types').Matrix\n  } & import('react').HTMLAttributes<HTMLDivElement>\n\n  /**\n   * Add 4 buttons: \n   * - Cancel to reset the matrix to how it was before changing the values (only when in edit mode)\n   * - Edit to make the fields editable (only when not in edit mode)\n   * - Clear to completely clear the table\n   * - Save to save the table\n   * @param param0 \n   */\n  const MatrixTable: import('react').FC<Omit<Props, 'initialMatrix'>> = ({ className, children, ...props }) => {\n  // State ------------------------------------------------------------------- //\n  const [{ matrix }, dispatch] = useContext(MatrixTableContext)\n  const [ matrixData, setMatrixData]  = useState(matrix);\n  const [ enableEdit, setEnableEdit ] = useState(true);\n  \n  // Handlers ---------------------------------------------------------------- //\n  useEffect(()=>{\n    fetch('http://localhost:3000/api/pricing', {\n      method: 'GET',\n      headers: {\n          accept: 'application/json',\n          'content-type': 'application/json'\n      },\n    })\n    .then(res => \n      res.json()\n    )\n    .then(data=> {\n      setMatrixData(data);\n      dispatch({type: 'GET_ALL_DATA', payload: data });\n\n    })\n    .catch(err => console.log('---error', err));\n  },[])\n\n  // You can save (to api) the matrix here. Remember to update originalMatrix when done.\n  const save = async () => {\n    dispatch({type: 'SAVE_JSON'});\n  }\n  // Effects ----------------------------------------------------------------- //\n  // Rendering --------------------------------------------------------------- //\n  \n    \n  // const updatematrixtable = \n  //   <table id=\"customers\">\n  //       <tr>\n  //         <th>months</th>\n  //         <th>lite</th>\n  //         <th>standard</th>\n  //         <th>unlimited</th>\n  //         <th>performance</th>\n  //       </tr>\n  //       <tr>\n  //         <td>12months</td>\n  //         <td>{matrixData[\"12months\"].lite}</td>\n  //         <td>{matrixData[\"12months\"].standard}</td>\n  //         <td>{matrixData[\"12months\"].unlimited}</td>\n  //       </tr>\n  //       <tr>\n  //         <td>24months</td>\n  //         <td>{matrixData[\"24months\"].lite}</td>\n  //         <td>{matrixData[\"24months\"].standard}</td>\n  //         <td>{matrixData[\"24months\"].unlimited}</td>\n  //       </tr>\n  //       <tr>\n  //         <td>36months</td>\n  //         <td>{matrixData[\"36months\"].lite}</td>\n  //         <td>{matrixData[\"36months\"].standard}</td>\n  //         <td>{matrixData[\"36months\"].unlimited}</td>\n  //       </tr>\n  //       <tr>\n  //         <td>mtm</td>\n  //         <td>{matrixData.mtm.lite}</td>\n  //         <td>{matrixData.mtm.standard}</td>\n  //         <td>{matrixData.mtm.unlimited}</td>\n  //       </tr>\n  //     </table>\n  const edit = ()=>{\n    console.log(\"editbutton\");\n    setEnableEdit(false);\n  }\n\n  const cancel = ()=>{\n    console.log(\"cancelbutton\");\n    setEnableEdit(true);\n  }\n\n  const clear = () => {\n    console.log('clear')\n    dispatch({type: 'CLEAR_PRICING'});\n  }\n\n  return (\n    <div className={classnames(['container', className])} {...props}>\n      <table id=\"customers\">\n        <tr>\n          <th>months</th>\n          <th>lite</th>\n          <th>standard</th>\n          <th>unlimited</th>\n        </tr>\n      \n        {Object.keys(matrix).map((keyName, i) => \n          <tr>\n            <td>{keyName}</td>\n            {enableEdit ? (\n              <>\n                <td>{matrix[keyName].lite}</td>\n                <td>{matrix[keyName].standard}</td>\n                <td>{matrix[keyName].unlimited}</td>\n              </>\n            ) : (\n              <>\n                <td><input type='number' defaultValue={matrix[keyName].lite} onChange={event => dispatch({type: 'EDIT_ACTION', payload: {keyName, fieldName: 'lite', value: event.target.value}})} /></td>\n                <td><input type='number' defaultValue={matrix[keyName].standard} /></td>\n                <td><input type='number' defaultValue={matrix[keyName].unlimited} /></td>\n              </>\n            )}\n          </tr>\n        )}\n      </table>\n      <div id='buttonGroup'>\n        <button onClick={save} className=\"btn btn-success\">Save</button>\n        <button onClick={clear} className=\"btn btn-success\">Clear</button>\n        {enableEdit ? <button onClick={edit} className=\"btn btn-success\">Edit</button> : <button onClick={cancel} className=\"btn btn-success\">Show</button>}\n      </div>\n\n      <style>{`\n        .container {\n          margin:0;\n          width:100%\n        }\n        #customers {\n          font-family: \"Trebuchet MS\", Arial, Helvetica, sans-serif;\n          border-collapse: collapse;\n          width: 100%;\n        }\n        \n        #customers td, #customers th {\n          width: 250px;\n          border: 1px solid #ddd;\n          padding: 8px;\n        }\n        \n        #customers tr:nth-child(even){background-color: #f2f2f2;}\n        \n        #customers tr:hover {background-color: #ddd;}\n        \n        #customers th {\n          padding-top: 12px;\n          padding-bottom: 12px;\n          text-align: left;\n          background-color: #4CAF50;\n          color: white;\n        }\n        #buttonGroup div {\n          padding-top: 20px;\n        }\n      `}</style>\n    </div>\n  )\n}\n\nconst MatrixTableWithContext: import('react').FC<Props> = ({ initialMatrix, ...props }) => {\n  // You can fetch the pricing here or in pages/index.ts\n  // Remember that you should try to reflect the state of pricing in originalMatrix.\n  // matrix will hold the latest value (edited or same as originalMatrix)\n\n  return (\n    <MatrixTableContextProvider initialMatrix={initialMatrix}>\n      <MatrixTable {...props} />\n    </MatrixTableContextProvider>\n  )\n}\n\nexport default MatrixTableWithContext\n"]},"metadata":{},"sourceType":"module"}