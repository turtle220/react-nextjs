{"ast":null,"code":"// This is the JOI validation schema, you define\n// all the validation logic in here, then run\n// the validation during the request lifecycle.\n// If you prefer to use your own way of validating the \n// incoming data, you can use it.\n// const schema = Joi.object<import('../../types').Matrix>({\n// })\nexport default (async (req, res) => {\n  try {\n    console.log('---req: ', req); // This will throw when the validation fails\n    // const data = await schema.validateAsync(req.body, {\n    //   abortEarly: false\n    // }) as import('../../types').Matrix\n    // Write the new matrix to public/pricing.json\n\n    res.statusCode = 200;\n    res.json(data);\n  } catch (e) {\n    console.error(e);\n\n    if (e.isJoi) {\n      // Handle the validation error and return a proper response\n      res.statusCode = 422;\n      res.end('Error');\n      return;\n    }\n\n    res.statusCode = 500;\n    res.json({\n      error: 'Unknown Error'\n    });\n  }\n});","map":{"version":3,"sources":["D:/interview/interview-fullstack-master/pages/api/save-pricing.ts"],"names":["req","res","console","log","statusCode","json","data","e","error","isJoi","end"],"mappings":"AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,gBAAe,OAAOA,GAAP,EAA2CC,GAA3C,KAAmF;AAChG,MAAI;AAEFC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBH,GAAxB,EAFE,CAGF;AACA;AACA;AACA;AAEA;;AAEAC,IAAAA,GAAG,CAACG,UAAJ,GAAiB,GAAjB;AACAH,IAAAA,GAAG,CAACI,IAAJ,CAASC,IAAT;AACD,GAZD,CAYE,OAAMC,CAAN,EAAS;AACTL,IAAAA,OAAO,CAACM,KAAR,CAAcD,CAAd;;AACA,QAAGA,CAAC,CAACE,KAAL,EAAY;AACV;AACAR,MAAAA,GAAG,CAACG,UAAJ,GAAiB,GAAjB;AACAH,MAAAA,GAAG,CAACS,GAAJ,CAAQ,OAAR;AACA;AACD;;AAEDT,IAAAA,GAAG,CAACG,UAAJ,GAAiB,GAAjB;AACAH,IAAAA,GAAG,CAACI,IAAJ,CAAS;AAAEG,MAAAA,KAAK,EAAE;AAAT,KAAT;AACD;AACF,CAzBD","sourcesContent":["import * as Joi from '@hapi/joi'\n\n\n\n// This is the JOI validation schema, you define\n// all the validation logic in here, then run\n// the validation during the request lifecycle.\n// If you prefer to use your own way of validating the \n// incoming data, you can use it.\n// const schema = Joi.object<import('../../types').Matrix>({\n\n// })\n\nexport default async (req: import('next').NextApiRequest, res: import('next').NextApiResponse) => {\n  try {\n\n    console.log('---req: ', req)\n    // This will throw when the validation fails\n    // const data = await schema.validateAsync(req.body, {\n    //   abortEarly: false\n    // }) as import('../../types').Matrix\n\n    // Write the new matrix to public/pricing.json\n\n    res.statusCode = 200\n    res.json(data)\n  } catch(e) {\n    console.error(e)\n    if(e.isJoi) {\n      // Handle the validation error and return a proper response\n      res.statusCode = 422\n      res.end('Error')\n      return\n    }\n    \n    res.statusCode = 500\n    res.json({ error: 'Unknown Error' })\n  }\n}"]},"metadata":{},"sourceType":"module"}