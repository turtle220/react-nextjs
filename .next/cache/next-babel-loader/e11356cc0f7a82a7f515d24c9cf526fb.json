{"ast":null,"code":"var _jsxFileName = \"D:\\\\interview\\\\interview-fullstack-master\\\\components\\\\MatrixTable\\\\context.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createContext, useReducer, useState } from 'react';\n/**\n * This is the \n */\n\nconst emptyMatrix = {\n  \"36months\": {\n    \"lite\": 0,\n    \"standard\": 0,\n    \"unlimited\": 0\n  },\n  \"24months\": {\n    \"lite\": 0,\n    \"standard\": 0,\n    \"unlimited\": 0\n  },\n  \"12months\": {\n    \"lite\": 0,\n    \"standard\": 0,\n    \"unlimited\": 0\n  },\n  \"mtm\": {\n    \"lite\": 0,\n    \"standard\": 0,\n    \"unlimited\": 0\n  }\n};\nconst defaultState = {\n  matrix: emptyMatrix,\n  originalMatrix: emptyMatrix\n};\n\nconst reducer = (state, action) => {\n  const {\n    0: matrixData,\n    1: setMatrixData\n  } = useState();\n  console.log('---action: ', action);\n\n  switch (action.type) {\n    case 'GET_ALL_DATA':\n      let matrixData;\n      setTimeout(() => {\n        fetch('http://localhost:3000/api/pricing', {\n          method: 'Get',\n          headers: {\n            accept: 'application/json',\n            'content-type': 'application/json'\n          } // body: JSON.stringify(\"dfdfd\")\n\n        }).then(res => res.json()).then(data => {\n          console.log('-----data: ', data); // setMatrixData(data)\n        }).catch(err => console.log('---error', err));\n      }, 1000); // console.log('---hree', matrixData)\n\n      return _objectSpread({\n        count: 5\n      }, state);\n\n    case 'SET_MATRIX':\n      console.log('---action: ', action);\n      return _objectSpread({}, state);\n\n    case 'SET_ORIGINAL_MATRIX':\n      return _objectSpread({}, state);\n\n    default:\n      return state;\n  }\n};\n\nexport const MatrixTableContext = createContext([defaultState, () => {}]);\n/**\n * This is the provider that hosts the state\n * @param param0 \n */\n\nexport const MatrixTableContextProvider = ({\n  initialMatrix,\n  children\n}) => {\n  console.log(initialMatrix);\n  const state = useReducer(reducer, {\n    matrix: initialMatrix || emptyMatrix,\n    originalMatrix: initialMatrix || emptyMatrix\n  });\n  console.log('---state: ', state);\n  return __jsx(MatrixTableContext.Provider, {\n    value: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 5\n    }\n  }, children);\n};","map":{"version":3,"sources":["D:/interview/interview-fullstack-master/components/MatrixTable/context.tsx"],"names":["createContext","useReducer","useState","emptyMatrix","defaultState","matrix","originalMatrix","reducer","state","action","matrixData","setMatrixData","console","log","type","setTimeout","fetch","method","headers","accept","then","res","json","data","catch","err","count","MatrixTableContext","MatrixTableContextProvider","initialMatrix","children"],"mappings":";;;;;;;;;;AAAA,SAASA,aAAT,EAAwBC,UAAxB,EAAoCC,QAApC,QAAoD,OAApD;AAEA;;;;AAsDA,MAAMC,WAAW,GAAG;AAClB,cAAY;AACR,YAAQ,CADA;AAER,gBAAY,CAFJ;AAGR,iBAAa;AAHL,GADM;AAMlB,cAAY;AACR,YAAQ,CADA;AAER,gBAAY,CAFJ;AAGR,iBAAa;AAHL,GANM;AAWlB,cAAY;AACR,YAAQ,CADA;AAER,gBAAY,CAFJ;AAGR,iBAAa;AAHL,GAXM;AAgBlB,SAAO;AACH,YAAQ,CADL;AAEH,gBAAY,CAFT;AAGH,iBAAa;AAHV;AAhBW,CAApB;AAuBA,MAAMC,YAA8B,GAAG;AACrCC,EAAAA,MAAM,EAAEF,WAD6B;AAErCG,EAAAA,cAAc,EAAEH;AAFqB,CAAvC;;AAKA,MAAMI,OAAO,GAAG,CAACC,KAAD,EAA0BC,MAA1B,KAAqE;AACnF,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8BT,QAAQ,EAA5C;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BJ,MAA3B;;AACA,UAAOA,MAAM,CAACK,IAAd;AACE,SAAK,cAAL;AACE,UAAIJ,UAAJ;AACAK,MAAAA,UAAU,CAAC,MAAM;AACfC,QAAAA,KAAK,CAAC,mCAAD,EAAsC;AAC3CC,UAAAA,MAAM,EAAE,KADmC;AAE3CC,UAAAA,OAAO,EAAE;AACLC,YAAAA,MAAM,EAAE,kBADH;AAEL,4BAAgB;AAFX,WAFkC,CAMzC;;AANyC,SAAtC,CAAL,CAQCC,IARD,CAQMC,GAAG,IACPA,GAAG,CAACC,IAAJ,EATF,EAWCF,IAXD,CAWMG,IAAI,IAAG;AACXX,UAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BU,IAA3B,EADW,CAEX;AACD,SAdD,EAeCC,KAfD,CAeOC,GAAG,IAAIb,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBY,GAAxB,CAfd;AAgBD,OAjBS,EAiBP,IAjBO,CAAV,CAFF,CAqBE;;AACA;AAAQC,QAAAA,KAAK,EAAE;AAAf,SAAqBlB,KAArB;;AACF,SAAK,YAAL;AACEI,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BJ,MAA3B;AACA,+BACKD,KADL;;AAGF,SAAK,qBAAL;AACE,+BACKA,KADL;;AAGF;AACE,aAAOA,KAAP;AAlCJ;AAoCD,CAvCD;;AAyCA,OAAO,MAAMmB,kBAAkB,GAAG3B,aAAa,CAA6D,CAACI,YAAD,EAAe,MAAM,CAAE,CAAvB,CAA7D,CAAxC;AAEP;;;;;AAIA,OAAO,MAAMwB,0BAA6D,GAAG,CAAC;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA;AAAjB,CAAD,KAAiC;AAC5GlB,EAAAA,OAAO,CAACC,GAAR,CAAYgB,aAAZ;AACA,QAAMrB,KAAK,GAAGP,UAAU,CAACM,OAAD,EAAU;AAAEF,IAAAA,MAAM,EAAEwB,aAAa,IAAI1B,WAA3B;AAAwCG,IAAAA,cAAc,EAAEuB,aAAa,IAAI1B;AAAzE,GAAV,CAAxB;AACFS,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BL,KAA1B;AACE,SACE,MAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAEA,KAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGsB,QADH,CADF;AAKD,CATM","sourcesContent":["import { createContext, useReducer, useState } from 'react'\n\n/**\n * This is the \n */\ninterface MatrixTableState {\n  /**\n   * This is the price matrix that contains the latest value\n   */\n  matrix: import('../../types').Matrix\n  /**\n   * We will use original matrix to help us \"reset\" the table when we want to cancel editing it.\n   * Remember that **whenever** you get the matrix from the server, you must set originalMatrix\n   * to that value; originalMatrix should try to mirror the matrix in our database.\n   */\n  originalMatrix: import('../../types').Matrix\n}\n\n/**\n * These are the actions you can dispatch. Add actions you want to help you\n * type the dispatch function\n */\ntype MatrixAction = {\n  type: 'SET_MATRIX',\n  /**\n   * When payload is empty, we will need to set the values from originalMatrix\n   */ \n  payload?: import('../../types').Matrix\n  metadata?: {\n    /**\n     * If this is set to true, then instead of resetting to the originalMatrix,\n     * we reset to the emptyMatrix\n     */\n    resetToEmpty?: boolean\n  }\n} | {\n  type: 'SET_ORIGINAL_MATRIX',\n  /**\n   * When empty, set the value from emptyMatrix\n   */\n  payload?: import('../../types').Matrix\n} | {\n  type: 'SOME_ACTION',\n  payload: any\n} | {\n  type: 'GET_ALL_DATA',\n  payload: any\n}// Here you will need to add your other action(s) in order to edit the pricing (remove SOME_ACTION)\n\n/**\n * This is for the Provider component\n */\ntype ProviderProps = {\n  initialMatrix?: import('../../types').Matrix\n}\n\nconst emptyMatrix = {\n  \"36months\": {\n      \"lite\": 0,\n      \"standard\": 0,\n      \"unlimited\": 0,\n  },\n  \"24months\": {\n      \"lite\": 0,\n      \"standard\": 0,\n      \"unlimited\": 0\n  },\n  \"12months\": {\n      \"lite\": 0,\n      \"standard\": 0,\n      \"unlimited\": 0\n  },\n  \"mtm\": {\n      \"lite\": 0,\n      \"standard\": 0,\n      \"unlimited\": 0\n  }\n}\n\nconst defaultState: MatrixTableState = {\n  matrix: emptyMatrix,\n  originalMatrix: emptyMatrix,\n}\n\nconst reducer = (state: MatrixTableState, action: MatrixAction): MatrixTableState => {\n  const [matrixData, setMatrixData] = useState();\n  console.log('---action: ', action)\n  switch(action.type) {\n    case 'GET_ALL_DATA':\n      let matrixData;\n      setTimeout(() => {\n        fetch('http://localhost:3000/api/pricing', {\n        method: 'Get',\n        headers: {\n            accept: 'application/json',\n            'content-type': 'application/json'\n        },\n          // body: JSON.stringify(\"dfdfd\")\n        })\n        .then(res => \n          res.json()\n        )\n        .then(data=> {\n          console.log('-----data: ', data)\n          // setMatrixData(data)\n        })\n        .catch(err => console.log('---error', err))\n      }, 1000);\n      \n      // console.log('---hree', matrixData)\n      return {count: 5, ...state}\n    case 'SET_MATRIX':\n      console.log('---action: ', action);\n      return {\n        ...state,\n      }\n    case 'SET_ORIGINAL_MATRIX':\n      return {\n        ...state\n      }\n    default:\n      return state\n  }\n}\n\nexport const MatrixTableContext = createContext<[MatrixTableState, import('react').Dispatch<MatrixAction>]>([defaultState, () => {}])\n\n/**\n * This is the provider that hosts the state\n * @param param0 \n */\nexport const MatrixTableContextProvider: import('react').FC<ProviderProps> = ({ initialMatrix, children }) => {\n  console.log(initialMatrix)\n  const state = useReducer(reducer, { matrix: initialMatrix || emptyMatrix, originalMatrix: initialMatrix || emptyMatrix })\nconsole.log('---state: ', state)\n  return (\n    <MatrixTableContext.Provider value={state}>\n      {children}\n    </MatrixTableContext.Provider>\n  )\n}"]},"metadata":{},"sourceType":"module"}